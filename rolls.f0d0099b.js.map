{"mappings":"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","sources":["./home/cpennington/personal/onesandskulls/node_modules/@parcel/scope-hoisting/lib/prelude.js","./src/js/rolls.js"],"sourcesContent":[null,"import {\n  ATTACKER_DOWN,\n  PUSH,\n  BOTH_DOWN,\n  DEFENDER_STUMBLES,\n  DEFENDER_DOWN,\n  TWO_DIE_BLOCK,\n  BLOCK,\n} from \"./dice\";\nimport { SKILL_NAME, SKILL, SITUATION } from \"./constants\";\n\n// TODO: Switch over to using dice.js for better clarity\n\nfunction ensureList(objOrList) {\n  if (objOrList && objOrList.length) {\n    return objOrList;\n  } else if (objOrList) {\n    return [objOrList];\n  } else {\n    return [];\n  }\n}\n\nfunction sample(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nclass Player {\n  team;\n  #playerState;\n\n  constructor(team, playerState) {\n    this.team = team;\n    this.playerState = playerState;\n    this.id = this.playerState.data.id;\n    this.name = this.playerState.data.name;\n    this.cell = this.playerState.cell;\n    this.situation = this.playerState.situation;\n    this.canAct = this.playerState.canact == 1 && this.situation === SITUATION.Active;\n  }\n\n  get skills() {\n    return Roll.translateStringNumberList(this.playerState.data.listskills);\n  }\n}\n\nclass Team {\n  #teamState;\n  constructor(teamState) {\n    this.teamState = teamState;\n    this.players = this.teamState.listpitchplayers.playerstate.map(\n      (playerstate) => new Player(this, playerstate)\n    );\n  }\n\n  get id() {\n    return this.teamState.data.teamid || 0;\n  }\n  get name() {\n    return this.teamState.data.name;\n  }\n  get turn() {\n    return this.teamState.gameturn || 0;\n  }\n}\n\nfunction playerById(teams, playerId) {\n  for (var team of teams) {\n    for (var player of team.players) {\n      if (player.id === playerId) {\n        return player;\n      }\n    }\n  }\n}\n\nexport class Roll {\n  static handledSkills = [];\n\n  constructor(attrs) {\n    Object.assign(this, attrs);\n\n    var unhandledSkills = this.skillsInEffect.filter(skillinfo => !this.constructor.handledSkills.includes(skillinfo.skillid));\n    if (unhandledSkills.length > 0) {\n      console.warn(\"Unhandled skills for roll\", {\n        roll: this,\n        skills: unhandledSkills.map(skillinfo => SKILL_NAME[skillinfo.skillid]),\n        rollName: this.constructor.rollName,\n      })\n    }\n\n  }\n  static argsFromXML(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    var teams = replaystep.boardstate.listteams.teamstate.map(\n      (teamstate) => new Team(teamstate)\n    );\n    var activeTeam =\n      teams.filter((team) => team.id == replaystep.boardstate.activeteam)[0] ||\n      teams[0];\n\n    var currentId = action.playerid;\n    var currentPlayer = playerById(teams, currentId);\n    return {\n      replaystep,\n      action,\n      boardactionresult,\n      stepIndex,\n      actionIndex,\n      resultIndex,\n      teams: teams,\n      activeTeam: activeTeam,\n      turn: (activeTeam && activeTeam.turn) || 0,\n      activePlayer: currentPlayer,\n      rollType: this.rollType(boardactionresult),\n      dice: this.dice(boardactionresult),\n    };\n  }\n  value(dice) {\n    throw \"value must be defined by subclass\";\n  }\n  get expectedValue() {\n    throw \"expectedValue must be defined by subclass\";\n  }\n  simulateDice() {\n    throw \"simulateDice must be defined by subclass\";\n  }\n\n  static ignore() {\n    return false;\n  }\n  static dice(boardactionresult) {\n    return this.translateStringNumberList(\n      boardactionresult.coachchoices.listdices\n    );\n  }\n  get actual() {\n    return Object.assign(this.dataPoint(0, this.dice, \"actual\"), {\n      turn: this.turn,\n      player: (this.activePlayer && this.activePlayer.name) || \"\",\n      playerSkills:\n        (this.activePlayer &&\n          this.activePlayer.skills.map((skill) => SKILL_NAME[skill])) ||\n        [],\n      rollName: this.constructor.rollName || this.rollName || this.rollType,\n      dice: this.dice,\n    });\n  }\n  simulated(iteration) {\n    return this.dataPoint(iteration, this.simulateDice(), \"simulated\");\n  }\n\n  dataPoint(iteration, dice, type) {\n    return {\n      iteration: iteration,\n      index:\n        this.stepIndex.toString().padStart(3, \"0\") +\n        \".\" +\n        this.actionIndex +\n        \".\" +\n        this.resultIndex,\n      team: this.activePlayer\n        ? this.activePlayer.team.id + \". \" + this.activePlayer.team.name\n        : this.activeTeam.id + \". \" + this.activeTeam.name,\n      outcomeValue: this.value(dice),\n      type: type,\n      expectedValue: this.expectedValue,\n    };\n  }\n\n  playerById(playerId) {\n    return playerById(this.teams, playerId);\n  }\n\n  playerAtPosition(cell) {\n    for (var team of this.teams) {\n      for (var player of team.players) {\n        if (player.cell.x === cell.x && player.cell.y === cell.y) {\n          return player;\n        }\n      }\n    }\n    console.log(\"No player found\", {\n      replaystep: this.replaystep,\n      action: this.action,\n      cell,\n    });\n  }\n  static rollType(boardactionresult) {\n    return boardactionresult.rolltype;\n  }\n\n  static translateStringNumberList(str) {\n    if (!str) return [];\n\n    var stripped = str.substring(1, str.length - 1);\n    var textList = stripped.split(\",\");\n\n    var numberList = [];\n    for (var i = 0; i < textList.length; i++) {\n      numberList.push(parseInt(textList[i]));\n    }\n    return numberList;\n  }\n\n  static fromReplayStep(stepIndex, replaystep) {\n    var actions = ensureList(replaystep.ruleseventboardaction);\n    var rolls = [];\n    for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n      var action = actions[actionIndex];\n      rolls = rolls.concat(\n        Roll.fromAction(stepIndex, replaystep, actionIndex, action)\n      );\n    }\n    return rolls;\n  }\n\n  static fromAction(stepIndex, replaystep, actionIndex, action) {\n    var results = ensureList(action.results.boardactionresult);\n    var rolls = [];\n    for (var resultIndex = 0; resultIndex < results.length; resultIndex++) {\n      var result = results[resultIndex];\n      var roll = this.fromBoardActionResult(\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        resultIndex,\n        result\n      );\n      if (roll) {\n        rolls.push(roll);\n      }\n    }\n    if (results.length == 0) {\n      console.warn(\"Unexpectedly missing boardactionresult\", {\n        stepIndex,\n        replaystep,\n        action,\n      });\n    }\n    return rolls;\n  }\n  static fromBoardActionResult(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    if (boardactionresult.rolltype === undefined) {\n      return null;\n    }\n    if (boardactionresult.coachchoices.listdices === undefined) {\n      return null;\n    }\n    var rollClass = ROLL_TYPES[boardactionresult.rolltype];\n    if (rollClass === null) {\n      return null;\n    }\n\n    if (rollClass) {\n      if (rollClass.ignore(replaystep, action, boardactionresult)) {\n        return null;\n      } else {\n        return new rollClass(\n          rollClass.argsFromXML(\n            stepIndex,\n            replaystep,\n            actionIndex,\n            action,\n            resultIndex,\n            boardactionresult\n          )\n        );\n      }\n    } else {\n      console.warn(\"Unknown roll \" + boardactionresult.rolltype, {\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        resultIndex,\n        boardactionresult,\n      });\n      return null;\n    }\n  }\n\n  get skillsInEffect() {\n    return ensureList(this.boardactionresult.coachchoices.listskills.skillinfo);\n  }\n\n  onActiveTeam(player) {\n    return player.team.id === this.activeTeam.id;\n  }\n\n  playerValue(player) {\n    return 1;\n  }\n\n  teamValue(team, situations) {\n    return team.players\n      .filter((player) => situations.includes(player.situation))\n      .map((player) => this.playerValue(player))\n      .reduce((a, b) => a + b, 0);\n  }\n\n  get halfTurnsLeft() {\n    // Return the number of half-turns the player is unavailable times the\n    // fraction of current team value it represents\n    var halfTurns = this.teams.map(team => {\n      if (team.turn <= 16) {\n        return (16 - team.turn);\n      } else {\n        return (24 - team.turn);\n      }\n    });\n    return halfTurns[0] + halfTurns[1];\n  }\n\n  onPitchValue(player) {\n    // The fraction of the teams on-pitch players that this player represents.\n    return this.playerValue(player) / this.teamValue(player.team, [SITUATION.Active]);\n  }\n\n  knockdownValue(player) {\n    // Return the number of half-turns the player is unavailable times the\n    // fraction of current team value it represents\n    var playerValue = this.onPitchValue(player);\n    if (this.onActiveTeam(player)) {\n      return playerValue * Math.min(2, this.halfTurnsLeft);\n    } else {\n      return playerValue;\n    }\n  }\n\n  stunValue(player) {\n    // Return the number of half-turns the player is unavailable times the\n    // fraction of current team value it represents\n    var playerValue = this.onPitchValue(player);\n    if (this.onActiveTeam(player)) {\n      return playerValue * Math.min(3, this.halfTurnsLeft);\n    } else {\n      return playerValue * Math.min(4, this.halfTurnsLeft);\n    }\n  }\n\n  koValue(player) {\n    return (this.onPitchValue(player) * this.halfTurnsLeft) - this.stunValue(player);\n  }\n\n  casValue(player) {\n    return this.koValue(player);\n  }\n\n  unactivatedPlayers() {\n    return this.activeTeam.players.filter(player => player.canAct);\n  }\n\n  turnoverValue() {\n    var value = this.unactivatedPlayers()\n      .filter(player => player != this.activePlayer)\n      .map((player) => this.onPitchValue(player))\n      .reduce((a, b) => a + b, 0);\n    return value;\n  }\n}\n\nclass BlockRoll extends Roll {\n  static rollName = \"Block\";\n  static handledSkills = [SKILL.Guard, SKILL.Horns];\n\n  static dice(boardactionresult) {\n    var dice = super.dice(boardactionresult);\n    // Block dice are doubled up, only use the first half of the dice list.\n    return dice.slice(0, dice.length / 2).map(BlockRoll.asBlockDie);\n  }\n\n  static ignore(replaystep, action, boardactionresult) {\n    // Block dice have dice repeated for the coaches selection, resulttype is missing for the second one\n    if (boardactionresult.resulttype != 2) {\n      return true;\n    }\n    if (boardactionresult.subresulttype == 35) {\n      // Opponent picking whether to activate fend\n      return true;\n    }\n    return false;\n  }\n\n  static asBlockDie(dieRoll) {\n    switch (dieRoll) {\n      case 0:\n        return ATTACKER_DOWN;\n      case 1:\n        return BOTH_DOWN;\n      case 2:\n        return PUSH;\n      case 3:\n        return DEFENDER_STUMBLES;\n      case 4:\n        return DEFENDER_DOWN;\n    }\n  }\n\n  dieValue(result, attacker, defender) {\n    var attackerSkills = (attacker && attacker.skills) || [];\n    var defenderSkills = (defender && defender.skills) || [];\n\n    switch (result) {\n      case ATTACKER_DOWN:\n        return -this.knockdownValue(attacker) - this.turnoverValue();\n      case BOTH_DOWN:\n        if (attackerSkills.includes(SKILL.Block)) {\n          if (defenderSkills.includes(SKILL.Block)) {\n            return 0;\n          } else {\n            return this.knockdownValue(defender);\n          }\n        } else if (attackerSkills.includes(SKILL.Wrestle)) {\n          return this.knockdownValue(defender) - this.knockdownValue(attacker);\n        } else {\n          return (\n            this.knockdownValue(defender) -\n            this.knockdownValue(attacker) -\n            this.turnoverValue()\n          );\n        }\n      case PUSH:\n        return this.knockdownValue(defender) * 0.25;\n      case DEFENDER_STUMBLES:\n        if (defenderSkills.includes(SKILL.Dodge)) {\n          return this.knockdownValue(defender) * 0.25;\n        } else {\n          return this.knockdownValue(defender);\n        }\n      case DEFENDER_DOWN:\n        return this.knockdownValue(defender);\n    }\n  }\n\n  get attacker() {\n    return this.activePlayer;\n  }\n\n  get defender() {\n    return this.playerAtPosition(this.action.order.cellto.cell);\n  }\n\n  value(dice) {\n    // TODO: Handle values based on skills\n    // TODO: Red Dice?\n    var aSkills = this.playerSkills;\n    return Math.max(\n      ...dice.map((die) => this.dieValue(die, this.attacker, this.defender))\n    );\n  }\n  get expectedValue() {\n    var values;\n    if (this.dice.length == 1) {\n      values = BLOCK.values.map((dice) => this.value([dice]));\n    } else {\n      values = TWO_DIE_BLOCK.values.map((dice) => this.value(dice));\n    }\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n  simulateDice() {\n    return this.dice.map(() =>\n      sample([\n        ATTACKER_DOWN,\n        BOTH_DOWN,\n        PUSH,\n        PUSH,\n        DEFENDER_STUMBLES,\n        DEFENDER_DOWN,\n      ])\n    );\n  }\n}\n\nclass FansRoll extends Roll {\n  // TODO: Need to capture both teams rolls, because result is about comparison.\n}\n\nclass ModifiedD6SumRoll extends Roll {\n  constructor({ target, modifier, ...rest }) {\n    super(rest);\n    this.modifier =\n      ensureList(this.boardactionresult.listmodifiers.dicemodifier || [])\n        .map((modifier) => modifier.value)\n        .reduce((a, b) => a + b, 0) || 0;\n    this.target = this.boardactionresult.requirement;\n  }\n\n  get actual() {\n    return Object.assign(super.actual, {\n      target: this.modifiedTarget,\n    });\n  }\n  get modifiedTarget() {\n    if (this.dice.length == 1) {\n      return Math.min(6, Math.max(2, this.target - this.modifier));\n    } else {\n      return this.target - this.modifier;\n    }\n  }\n  value(dice) {\n    if (dice.reduce((a, b) => a + b, 0) >= this.modifiedTarget) {\n      return this.passValue();\n    } else {\n      return this.failValue();\n    }\n  }\n  get expectedValue() {\n    var diceSums = [0];\n    for (var die = 0; die < this.dice.length; die++) {\n      var newSums = [];\n      for (var face = 1; face <= 6; face++) {\n        for (const sum of diceSums) {\n          newSums.push(sum + face);\n        }\n      }\n      diceSums = newSums;\n    }\n\n    var numPossible = diceSums.length;\n    var expected = 0;\n    for (const sum of diceSums) {\n      if (sum >= this.modifiedTarget) {\n        expected += this.passValue() / numPossible;\n      } else {\n        expected += this.failValue() / numPossible;\n      }\n    }\n    return expected;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n  passValue() {\n    return 0;\n  }\n  failValue() {\n    return 0;\n  }\n}\n\nclass PickupRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pickup\";\n  failValue() {\n    return -this.turnoverValue();\n  }\n}\n\nclass ArmorRoll extends ModifiedD6SumRoll {\n  static rollName = \"Armor\";\n  static handledSkills = [SKILL.MightyBlow, SKILL.Claw];\n\n  constructor({ ...rest }) {\n    super(rest);\n\n    // An Armor PileOn has a IsOrderCompleted RollType 60 right before it\n    if (this.resultIndex == 0) {\n      this.isPileOn = false;\n    } else {\n      var previousResult = this.action.results.boardactionresult[this.resultIndex - 1];\n      this.isPileOn = previousResult.rolltype == 59;\n      if (this.isPileOn) {\n        var previousSkills = previousResult.coachchoices.listskills.skillinfo;\n        if (!previousSkills) {\n          console.log(previousResult);\n        }\n        if (previousSkills && !previousSkills.length) {\n          previousSkills = [previousSkills];\n        }\n        this.pilingOnPlayer = this.playerById(\n          previousSkills.filter(skill => skill.skillid == SKILL.PilingOn)[0].playerid\n        );\n      }\n    }\n  }\n\n  passValue() {\n    // passValue is negative because \"Passing\" an armor roll means rolling higher than\n    // armor, which is a bad thing.\n    var injuredPlayerValue = -this.stunValue(this.activePlayer); // Player is at least stunned = out for 2 turns\n    if (this.isPileOn) {\n      // Using Piling On means the piling on player is out for a whole turn;\n      return injuredPlayerValue + this.knockdownValue(this.pilingOnPlayer);\n    } else {\n      return injuredPlayerValue;\n    }\n  }\n\n  failValue() {\n    if (this.isPileOn) {\n      // Using Piling On means the piling on player is out for a whole turn;\n      return this.knockdownValue(this.pilingOnPlayer);\n    } else {\n      return 0;\n    }\n  }\n\n  value(dice) {\n    return super.value(dice);\n  }\n}\n\nclass WildAnimalRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wild Animal\";\n  failValue() {\n    return -this.knockdownValue(this.activePlayer) * 0.5;\n  }\n}\n\nclass DauntlessRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dauntless\";\n}\n\nclass DodgeRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dodge\";\n  static handledSkills = [SKILL.BreakTackle];\n  failValue() {\n    return -this.knockdownValue(this.activePlayer) - this.turnoverValue();\n  }\n}\n\nclass JumpUpRoll extends ModifiedD6SumRoll {\n  static handledSkills = [SKILL.JumpUp];\n  static rollName = \"Jump Up\";\n}\n\nclass PassRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pass\";\n  failValue() {\n    return -this.turnoverValue();\n  }\n}\n\nclass InterceptionRoll extends ModifiedD6SumRoll {\n  // TODO: Player/team seems incorrect. Double-check w/ in-game replay viewer\n  static rollName = \"Interception\";\n}\n\nclass WakeUpRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wake Up\";\n  passValue() {\n    return this.koValue(this.activePlayer);\n  }\n}\n\nclass GFIRoll extends ModifiedD6SumRoll {\n  static rollName = \"GFI\";\n  failValue() {\n    return -this.knockdownValue(this.activePlayer) - this.turnoverValue();\n  }\n}\n\nclass CatchRoll extends ModifiedD6SumRoll {\n  static rollName = \"Catch\";\n}\n\nclass InjuryRoll extends Roll {\n  static rollName = \"Injury\";\n  static handledSkills = [SKILL.MightyBlow, SKILL.DirtyPlayer];\n\n  constructor({ ...rest }) {\n    super(rest);\n\n    // An Injury PileOn has a IsOrderCompleted RollType 60 right before it\n    if (this.resultIndex == 0) {\n      this.isPileOn = false;\n    } else {\n      var previousResult = this.action.results.boardactionresult[this.resultIndex - 1];\n      this.isPileOn = previousResult.rolltype == 60;\n      if (this.isPileOn) {\n        var previousSkills = ensureList(previousResult.coachchoices.listskills.skillinfo);\n        this.pilingOnPlayer = this.playerById(\n          previousSkills.filter(skill => skill.skillid == SKILL.PilingOn)[0].playerid\n        );\n      }\n    }\n\n    this.modifier =\n      ensureList(this.boardactionresult.listmodifiers.dicemodifier || [])\n        .map((modifier) => modifier.value)\n        .reduce((a, b) => a + b, 0) || 0;\n  }\n\n  // TODO: Handle skills\n  injuryValue(total) {\n    if (total <= 7) {\n      return 0; // Only stunned, no additional cost relative to armor break failure\n    } else if (total <= 9) {\n      return -this.koValue(this.activePlayer);\n    } else {\n      return -this.casValue(this.activePlayer);\n    }\n  }\n\n  value(dice) {\n    var total = dice[0] + dice[1] + this.modifier;\n    if (this.isPileOn) {\n      // Using Piling On means the piling on player is out for a whole turn;\n      return this.injuryValue(total) + this.onPitchValue(this.pilingOnPlayer);\n    } else {\n      return this.injuryValue(total);\n    }\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var first = 1; first <= 6; first++) {\n      for (var second = 1; second <= 6; second++) {\n        expected += this.value([first, second]);\n      }\n    }\n    return expected / 36;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n}\n\nclass CasualtyRoll extends Roll {\n  static rollName = \"Casualty\";\n  // TODO: Handle skills\n  // TODO: Selecting the Apo result seems to read as a separate roll\n\n  static dice(boardactionresult) {\n    // Casualty dice are also doubled up, and also both rolls appear when an apoc is used (so the last one is the valid one)\n    var dice = super.dice(boardactionresult);\n    dice = dice.slice(0, dice.length / 2);\n    return [dice[dice.length - 1]];\n  }\n  value(dice) {\n    return 0;\n    if (dice < 40) {\n      return 0; // Badly Hurt\n    } else if (dice < 50) {\n      return -0.5; // MNG\n    } else if (dice < 60) {\n      return -0.75; // Stat Damage\n    } else {\n      return -1; // Dead\n    }\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var type = 1; type <= 6; type++) {\n      for (var subtype = 1; subtype <= 8; subtype++) {\n        expected += this.value(type * 10 + subtype);\n      }\n    }\n    return expected / 48;\n  }\n  simulateDice() {\n    return sample([1, 2, 3, 4, 5, 6]) * 10 + sample([1, 2, 3, 4, 5, 6, 7, 8]);\n  }\n}\n\nexport const ROLL_TYPES = {\n  1: GFIRoll,\n  2: DodgeRoll,\n  3: ArmorRoll,\n  4: InjuryRoll,\n  5: BlockRoll,\n  //6: StandUpRoll,\n  7: PickupRoll,\n  8: CasualtyRoll,\n  9: CatchRoll,\n  10: null, // Kickoff Scatter\n  11: null, // Throw-in Roll\n  12: PassRoll,\n  13: null, // Push\n  14: null, // Follow up\n  16: InterceptionRoll,\n  17: WakeUpRoll,\n  //20: BoneHeadRoll,\n  //21: ReallyStupidRoll,\n  22: WildAnimalRoll,\n  //23: LonerRoll,\n  //24: LandingRoll,\n  26: null, // Inaccurate Pass Scatter\n  //27: AlwaysHungryRoll,\n  29: DauntlessRoll,\n  31: JumpUpRoll,\n  // 34: StabRoll,\n  // 36: LeapRoll,\n  // 37: FoulAppearanceRoll,\n  // 40: TakeRootRoll,\n  // 42: HailMaryPassRoll,\n  // 45: ProRoll,\n  // 46: HypnoticGazeRoll,\n  // 54: FireballRoll,\n  // 55: LightningBoltRoll,\n  // 56: ThrowTeammateRoll,\n  58: null, // Kickoff Gust\n  59: ArmorRoll, // Armor Roll with Pile On. If followed by a RollType 59 w/ IsOrderCompleted, then PO happened. Otherwise, no PO\n  60: InjuryRoll, // Injury Roll with Pile On. If followed by a RollType 60 w/ IsOrderCompleted, then PO happened, otherwise, no PO?\n  63: null, // Carrier KD scatter\n  // 69: FansRoll,\n  70: null, // Weather\n};\n\n// TODO: Parse Kickoff events\n"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","ensureList","objOrList","length","sample","list","Math","floor","random","Player","a","team","playerState","$de1762abb55249d07ce983$var$_classCallCheck","this","$de1762abb55249d07ce983$var$_defineProperty","$de1762abb55249d07ce983$var$_playerState","set","writable","value","data","cell","situation","canAct","canact","SITUATION","Active","Roll","translateStringNumberList","listskills","Team","teamState","c","$de1762abb55249d07ce983$var$_teamState","players","listpitchplayers","playerstate","map","teamid","gameturn","playerById","teams","playerId","d","e","f","g","Symbol","iterator","next","done","i","j","k","l","player","n","attrs","Object","assign","unhandledSkills","skillsInEffect","filter","skillinfo","constructor","handledSkills","includes","skillid","console","warn","roll","skills","SKILL_NAME","rollName","iteration","dataPoint","simulateDice","dice","type","index","stepIndex","toString","padStart","actionIndex","resultIndex","activePlayer","activeTeam","outcomeValue","expectedValue","b","h","m","x","y","log","replaystep","action","situations","playerValue","reduce","teamValue","onPitchValue","onActiveTeam","min","halfTurnsLeft","stunValue","koValue","unactivatedPlayers","turn","playerSkills","skill","rollType","boardactionresult","coachchoices","halfTurns","boardstate","listteams","teamstate","activeteam","currentPlayer","playerid","listdices","rolltype","str","textList","substring","split","numberList","push","parseInt","actions","ruleseventboardaction","rolls","concat","fromAction","results","result","fromBoardActionResult","rollClass","ROLL_TYPES","ignore","argsFromXML","BlockRoll","attacker","defender","attackerSkills","defenderSkills","ATTACKER_DOWN","knockdownValue","turnoverValue","BOTH_DOWN","SKILL","Block","Wrestle","PUSH","DEFENDER_STUMBLES","Dodge","DEFENDER_DOWN","max","apply","$de1762abb55249d07ce983$var$_toConsumableArray","die","dieValue","playerAtPosition","order","cellto","values","BLOCK","TWO_DIE_BLOCK","$de1762abb55249d07ce983$var$_get","$de1762abb55249d07ce983$var$_getPrototypeOf","call","slice","asBlockDie","resulttype","subresulttype","dieRoll","Guard","Horns","ModifiedD6SumRoll","target","modifier","rest","$de1762abb55249d07ce983$var$_objectWithoutProperties","$de1762abb55249d07ce983$var$_possibleConstructorReturn","listmodifiers","dicemodifier","requirement","modifiedTarget","passValue","failValue","prototype","newSums","diceSums","face","sum","numPossible","expected","o","PickupRoll","ArmorRoll","$de1762abb55249d07ce983$var$_extends","isPileOn","previousResult","previousSkills","pilingOnPlayer","PilingOn","injuredPlayerValue","MightyBlow","Claw","WildAnimalRoll","DauntlessRoll","DodgeRoll","BreakTackle","JumpUpRoll","JumpUp","PassRoll","InterceptionRoll","WakeUpRoll","GFIRoll","CatchRoll","InjuryRoll","total","casValue","injuryValue","first","second","DirtyPlayer","CasualtyRoll","subtype","1","2","3","4","5","7","8","9","10","11","12","13","14","16","17","22","26","29","31","58","59","60","63","70"],"version":3,"file":"rolls.f0d0099b.js.map"}