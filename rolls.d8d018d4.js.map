{"mappings":"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","sources":["./src/js/rolls.js"],"sourcesContent":["// TODO: Switch over to using dice.js for better clarity\n\nfunction ensureList(objOrList) {\n  if (objOrList && objOrList.length) {\n    return objOrList;\n  } else {\n    return [objOrList];\n  }\n}\n\nfunction sample(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nclass Roll {\n  constructor(attrs) {\n    console.log(attrs);\n    Object.assign(this, attrs);\n  }\n  static argsFromXML(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    var playerData = this.currentPlayerData(replaystep, action);\n    return {\n      stepIndex,\n      actionIndex,\n      resultIndex,\n      team: this.activeTeamName(replaystep),\n      teamId: this.activeTeamId(replaystep),\n      turn: this.currentTurn(replaystep),\n      playerName: playerData.player.data.name,\n      playerTeam: playerData.team.data.name,\n      playerTeamId: playerData.teamId,\n      playerSkills: this.translateStringNumberList(\n        playerData.player.data.listskills\n      ),\n      rollType: this.rollType(boardactionresult),\n      dice: this.dice(boardactionresult),\n    };\n  }\n  value(dice) {\n    throw \"value must be defined by subclass\";\n  }\n  get expectedValue() {\n    throw \"expectedValue must be defined by subclass\";\n  }\n  simulateDice() {\n    throw \"simulateDice must be defined by subclass\";\n  }\n  static valueTable() {\n    throw \"valueTable must be defined by subclass\";\n  }\n\n  static ignore() {\n    return false;\n  }\n  static dice(boardactionresult) {\n    return this.translateStringNumberList(\n      boardactionresult.coachchoices.listdices\n    );\n  }\n  get actual() {\n    return Object.assign(this.dataPoint(0, this.dice, \"actual\"), {\n      turn: this.turn,\n      player: this.playerName,\n      playerSkills: this.playerSkills.map((skill) => skillNames[skill]),\n      rollName: this.constructor.rollName || this.rollName || this.rollType,\n      dice: this.dice,\n    });\n  }\n  simulated(iteration) {\n    return this.dataPoint(iteration, this.simulateDice(), \"simulated\");\n  }\n\n  dataPoint(iteration, dice, type) {\n    return {\n      iteration: iteration,\n      index:\n        this.stepIndex.toString().padStart(3, \"0\") +\n        \".\" +\n        this.actionIndex +\n        \".\" +\n        this.resultIndex,\n      team: this.playerTeam\n        ? this.playerTeamId + \". \" + this.playerTeam\n        : this.activeTeamId + \". \" + this.activeTeam,\n      outcomeValue: this.value(dice),\n      type: type,\n      expectedValue: this.expectedValue,\n    };\n  }\n\n  static teamName(replaystep, teamId) {\n    return replaystep.boardstate.listteams.teamstate[teamId].data.name;\n  }\n  static activeTeamName(replaystep) {\n    return this.teamName(replaystep, this.activeTeamId(replaystep));\n  }\n  static activeTeamId(replaystep) {\n    return replaystep.boardstate.activeteam || 0;\n  }\n  static currentTurn(replaystep) {\n    return (\n      replaystep.boardstate.listteams.teamstate[this.activeTeamId(replaystep)]\n        .gameturn || 0\n    );\n  }\n\n  static currentPlayerData(replaystep, action) {\n    var currentId = this.currentPlayer(action);\n    var teams = replaystep.boardstate.listteams.teamstate;\n    for (var teamId = 0; teamId < teams.length; teamId++) {\n      var team = teams[teamId];\n      for (var player of team.listpitchplayers.playerstate) {\n        if (player.id === currentId) {\n          return { team, teamId, player, playerId: player.id };\n        }\n      }\n    }\n    console.log(\"No player found\", { replaystep, action });\n  }\n\n  static currentPlayer(action) {\n    return action.playerid;\n  }\n  static rollType(boardactionresult) {\n    return boardactionresult.rolltype;\n  }\n\n  static translateStringNumberList(str) {\n    if (!str) return [];\n\n    var stripped = str.substring(1, str.length - 1);\n    var textList = stripped.split(\",\");\n\n    var numberList = [];\n    for (var i = 0; i < textList.length; i++) {\n      numberList.push(parseInt(textList[i]));\n    }\n    return numberList;\n  }\n\n  static fromReplayStep(stepIndex, replaystep) {\n    var actions = replaystep.ruleseventboardaction;\n    if (actions && actions.length) {\n      var rolls = [];\n      for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n        var action = actions[actionIndex];\n        rolls = rolls.concat(\n          Roll.fromAction(stepIndex, replaystep, actionIndex, action)\n        );\n      }\n      return rolls;\n    } else if (actions) {\n      return Roll.fromAction(stepIndex, replaystep, 0, actions);\n    } else {\n      return [];\n    }\n  }\n\n  static fromAction(stepIndex, replaystep, actionIndex, action) {\n    var results = action.results.boardactionresult;\n    if (results && results.length) {\n      var rolls = [];\n      for (var resultIndex = 0; resultIndex < results.length; resultIndex++) {\n        var result = results[resultIndex];\n        var roll = this.fromBoardActionResult(\n          stepIndex,\n          replaystep,\n          actionIndex,\n          action,\n          resultIndex,\n          result\n        );\n        if (roll) {\n          rolls.push(roll);\n        }\n      }\n      return rolls;\n    } else if (results) {\n      var roll = this.fromBoardActionResult(\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        0,\n        results\n      );\n      if (roll) {\n        return [roll];\n      } else {\n        return [];\n      }\n    } else {\n      console.warn(\"Unexpectedly missing boardactionresult\", {\n        stepIndex,\n        replaystep,\n        action,\n      });\n    }\n  }\n  static fromBoardActionResult(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    if (boardactionresult.rolltype === undefined) {\n      return null;\n    }\n    if (boardactionresult.coachchoices.listdices === undefined) {\n      return null;\n    }\n    var rollClass = ROLL_TYPES[boardactionresult.rolltype];\n    if (rollClass === null) {\n      return null;\n    }\n\n    if (rollClass) {\n      if (rollClass.ignore(replaystep, action, boardactionresult)) {\n        return null;\n      } else {\n        return new rollClass(\n          rollClass.argsFromXML(\n            stepIndex,\n            replaystep,\n            actionIndex,\n            action,\n            resultIndex,\n            boardactionresult\n          )\n        );\n      }\n    } else {\n      console.warn(\"Unknown roll \" + boardactionresult.rolltype, {\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        resultIndex,\n        boardactionresult,\n      });\n      return null;\n    }\n  }\n\n  playerValue(player) {\n    return 1 / 11;\n  }\n\n  knockdownValue(player) {\n    if (activePlayer(player)) {\n      return playerValue(player) * 2;\n    } else {\n      return playerValue(player);\n    }\n  }\n\n  turnoverValue() {\n    return unactivatedPlayers()\n      .map((player) => playerValue(player))\n      .reduce((a, b) => a + b, 0);\n  }\n}\n\nclass BlockRoll extends Roll {\n  static rollName = \"Block\";\n\n  static dice(boardactionresult) {\n    var dice = super.dice(boardactionresult);\n    // Block dice are doubled up, only use the first half of the dice list.\n    return dice.slice(0, dice.length / 2).map(BlockRoll.asBlockDie);\n  }\n\n  static ignore(replaystep, action, boardactionresult) {\n    // Block dice have dice repeated for the coaches selection, resulttype is missing for the second one\n    if (boardactionresult.resulttype != 2) {\n      return true;\n    }\n    if (boardactionresult.subresulttype == 35) {\n      // Opponent picking whether to activate fend\n      return true;\n    }\n    return false;\n  }\n\n  static asBlockDie(dieRoll) {\n    switch (dieRoll) {\n      case 0:\n        return ATTACKER_DOWN;\n      case 1:\n        return BOTH_DOWN;\n      case 2:\n        return PUSH;\n      case 3:\n        return DEFENDER_STUMBLES;\n      case 4:\n        return DEFENDER_DOWN;\n    }\n  }\n\n  static dieValue(result, attacker, defender) {\n    var attackerSkills = attacker.skills || [];\n    var defenderSkills = defender.skills || [];\n\n    switch (result) {\n      case ATTACKER_DOWN:\n        return -this.knockdownValue(attacker) - this.turnoverValue();\n      case BOTH_DOWN:\n        if (attackerSkills.includes(skills.Block)) {\n          if (defenderSkills.includes(skills.Block)) {\n            return 0;\n          } else {\n            return this.knockdownValue(defender);\n          }\n        } else if (attackerSkills.includes(skills.Wrestle)) {\n          return this.knockdownValue(defender) - this.knockdownValue(attacker);\n        } else {\n          return (\n            this.knockdownValue(defender) -\n            this.knockdownValue(attacker) -\n            this.turnoverValue()\n          );\n        }\n      case PUSH:\n        return this.knockdownValue(defender) * 0.25;\n      case DEFENDER_STUMBLES:\n        if (defenderSkills.includes(skills.Dodge)) {\n          return this.knockdownValue(defender) * 0.25;\n        } else {\n          return this.knockdownValue(defender);\n        }\n      case DEFENDER_DOWN:\n        return this.knockdownValue(defender);\n    }\n  }\n  value(dice) {\n    // TODO: Handle values based on skills\n    // TODO: Red Dice?\n    var aSkills = this.playerSkills;\n    return Math.max(\n      ...dice.map((die) =>\n        BlockRoll.dieValue(die, this.attacker, this.defender)\n      )\n    );\n  }\n  get expectedValue() {\n    var values;\n    if (this.dice.length == 1) {\n      values = BLOCK.values.map((dice) => this.value([dice]));\n    } else {\n      values = TWO_DIE_BLOCK.values.map((dice) => this.value(dice));\n    }\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n  simulateDice() {\n    return this.dice.map(() =>\n      sample([\n        ATTACKER_DOWN,\n        BOTH_DOWN,\n        PUSH,\n        PUSH,\n        DEFENDER_STUMBLES,\n        DEFENDER_DOWN,\n      ])\n    );\n  }\n  static valueTable() {\n    return {\n      [`${this.rollName} - Attacker Down`]: this.dieValue(ATTACKER_DOWN),\n      [`${this.rollName} - Both Down`]: this.dieValue(BOTH_DOWN),\n      [`${this.rollName} - Both Down (Block vs None)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Block]\n      ),\n      [`${this.rollName} - Both Down (Wrestle vs Anything)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Wrestle]\n      ),\n      [`${this.rollName} - Both Down (Block vs Block)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Block],\n        [skills.Block]\n      ),\n      [`${this.rollName} - Both Down (None vs Block)`]: this.dieValue(\n        BOTH_DOWN,\n        [],\n        [skills.Block]\n      ),\n      [`${this.rollName} - Push`]: this.dieValue(PUSH),\n      [`${this.rollName} - Defender Stumbles`]: this.dieValue(\n        DEFENDER_STUMBLES\n      ),\n      [`${this.rollName} - Defender Down`]: this.dieValue(DEFENDER_DOWN),\n    };\n  }\n}\n\nclass FansRoll extends Roll {\n  // TODO: Need to capture both teams rolls, because result is about comparison.\n}\n\nclass ModifiedD6SumRoll extends Roll {\n  constructor({ target, modifier, ...rest }) {\n    super(rest);\n    this.target = target;\n    this.modifier = modifier;\n  }\n  static argsFromXML(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    var args = super.argsFromXML(\n      stepIndex,\n      replaystep,\n      actionIndex,\n      action,\n      resultIndex,\n      boardactionresult\n    );\n    args.modifier =\n      ensureList(boardactionresult.listmodifiers.dicemodifier || [])\n        .map((modifier) => modifier.value)\n        .reduce((a, b) => a + b, 0) || 0;\n    args.target = boardactionresult.requirement;\n    return args;\n  }\n\n  get actual() {\n    return Object.assign(super.actual, {\n      target: this.modifiedTarget,\n    });\n  }\n  get modifiedTarget() {\n    if (this.dice.length == 1) {\n      return Math.min(6, Math.max(2, this.target - this.modifier));\n    } else {\n      return this.target - this.modifier;\n    }\n  }\n  value(dice) {\n    if (dice.reduce((a, b) => a + b, 0) >= this.modifiedTarget) {\n      return this.constructor.passValue;\n    } else {\n      return this.constructor.failValue;\n    }\n  }\n  get expectedValue() {\n    var diceSums = [0];\n    for (var die = 0; die < this.dice.length; die++) {\n      var newSums = [];\n      for (var face = 1; face <= 6; face++) {\n        for (const sum of diceSums) {\n          newSums.push(sum + face);\n        }\n      }\n      diceSums = newSums;\n    }\n\n    var numPossible = diceSums.length;\n    var expected = 0;\n    for (const sum of diceSums) {\n      if (sum >= this.modifiedTarget) {\n        expected += this.constructor.passValue / numPossible;\n      } else {\n        expected += this.constructor.failValue / numPossible;\n      }\n    }\n    return expected;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Pass`] = this.passValue;\n    table[`${this.rollName} - Fail`] = this.failValue;\n    return table;\n  }\n}\n\nclass PickupRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pickup\";\n  static passValue = 1;\n  static failValue = -1;\n}\nclass ArmorRoll extends ModifiedD6SumRoll {\n  static rollName = \"Armor\";\n  static passValue = -1;\n  static failValue = 0;\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Break`] = this.passValue;\n    table[`${this.rollName} - Save`] = this.failValue;\n    return table;\n  }\n}\n\nclass WildAnimalRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wild Animal\";\n  static passValue = 0;\n  static failValue = -1;\n}\n\nclass DauntlessRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dauntless\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass DodgeRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dodge\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass JumpUpRoll extends ModifiedD6SumRoll {\n  static rollName = \"Jump Up\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass PassRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pass\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass InterceptionRoll extends ModifiedD6SumRoll {\n  // TODO: Player/team seems incorrect. Double-check w/ in-game replay viewer\n  static rollName = \"Interception\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass WakeUpRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wake Up\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass GFIRoll extends ModifiedD6SumRoll {\n  static rollName = \"GFI\";\n  static passValue = 0;\n  static failValue = -1;\n}\n\nclass CatchRoll extends ModifiedD6SumRoll {\n  static rollName = \"Catch\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass InjuryRoll extends Roll {\n  static rollName = \"Injury\";\n  // TODO: Handle skills\n  static injuryValue(total) {\n    if (total <= 7) {\n      return 0; // Only stunned, best outcome\n    } else if (total <= 9) {\n      return -0.5; // KO\n    } else {\n      return -1; // CAS\n    }\n  }\n  value(dice) {\n    var total = dice[0] + dice[1];\n    return this.constructor.injuryValue(total);\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var first = 1; first <= 6; first++) {\n      for (var second = 1; second <= 6; second++) {\n        expected += this.value([first, second]);\n      }\n    }\n    return expected / 36;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Stun`] = this.injuryValue(7);\n    table[`${this.rollName} - KO`] = this.injuryValue(9);\n    table[`${this.rollName} - Casualty`] = this.injuryValue(12);\n    return table;\n  }\n}\n\nclass CasualtyRoll extends Roll {\n  static rollName = \"Casualty\";\n  // TODO: Handle skills\n  // TODO: Selecting the Apo result seems to read as a separate roll\n\n  static dice(boardactionresult) {\n    // Casualty dice are also doubled up, and also both rolls appear when an apoc is used (so the last one is the valid one)\n    var dice = super.dice(boardactionresult);\n    dice = dice.slice(0, dice.length / 2);\n    return [dice[dice.length - 1]];\n  }\n  static casValue(dice) {\n    if (dice < 4) {\n      return 0; // Badly Hurt\n    } else if (dice < 50) {\n      return -0.5; // MNG\n    } else if (dice < 60) {\n      return -0.75; // Stat Damage\n    } else {\n      return -1; // Dead\n    }\n  }\n  value(dice) {\n    return this.constructor.casValue(dice);\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var type = 1; type <= 6; type++) {\n      for (var subtype = 1; subtype <= 8; subtype++) {\n        expected += this.value(type * 10 + subtype);\n      }\n    }\n    return expected / 48;\n  }\n  simulateDice() {\n    return sample([1, 2, 3, 4, 5, 6]) * 10 + sample([1, 2, 3, 4, 5, 6, 7, 8]);\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Badly Hurt`] = this.casValue(35);\n    table[`${this.rollName} - Miss Next game`] = this.casValue(45);\n    table[`${this.rollName} - Stat Damage`] = this.casValue(55);\n    table[`${this.rollName} - Dead`] = this.casValue(65);\n    return table;\n  }\n}\n\nconst ROLL_TYPES = {\n  1: GFIRoll,\n  2: DodgeRoll,\n  3: ArmorRoll,\n  4: InjuryRoll,\n  5: BlockRoll,\n  //6: StandUpRoll,\n  7: PickupRoll,\n  8: CasualtyRoll,\n  9: CatchRoll,\n  10: null, // Kickoff Scatter\n  11: null, // Throw-in Roll\n  12: PassRoll,\n  13: null, // Push\n  14: null, // Follow up\n  16: InterceptionRoll,\n  17: WakeUpRoll,\n  //20: BoneHeadRoll,\n  //21: ReallyStupidRoll,\n  22: WildAnimalRoll,\n  //23: LonerRoll,\n  //24: LandingRoll,\n  26: null, // Inaccurate Pass Scatter\n  //27: AlwaysHungryRoll,\n  29: DauntlessRoll,\n  31: JumpUpRoll,\n  // 34: StabRoll,\n  // 36: LeapRoll,\n  // 37: FoulAppearanceRoll,\n  // 40: TakeRootRoll,\n  // 42: HailMaryPassRoll,\n  // 45: ProRoll,\n  // 46: HypnoticGazeRoll,\n  // 54: FireballRoll,\n  // 55: LightningBoltRoll,\n  // 56: ThrowTeammateRoll,\n  58: null, // Kickoff Gust\n  59: ArmorRoll,\n  60: InjuryRoll,\n  63: null, // Carrier KD scatter\n  // 69: FansRoll,\n  70: null, // Weather\n};\n\n// TODO: Parse Kickoff events\n"],"names":["sample","list","Math","floor","random","length","Roll","a","attrs","$de1762abb55249d07ce983$var$_classCallCheck","this","console","log","Object","assign","iteration","dataPoint","simulateDice","dice","type","index","stepIndex","toString","padStart","actionIndex","resultIndex","team","playerTeam","playerTeamId","activeTeamId","activeTeam","outcomeValue","value","expectedValue","player","activePlayer","playerValue","unactivatedPlayers","map","reduce","b","turn","playerName","playerSkills","skill","skillNames","rollName","constructor","rollType","replaystep","action","boardactionresult","playerData","currentPlayerData","activeTeamName","teamId","currentTurn","data","name","translateStringNumberList","listskills","coachchoices","listdices","boardstate","listteams","teamstate","teamName","activeteam","gameturn","currentId","currentPlayer","teams","g","h","i","j","l","listpitchplayers","playerstate","Symbol","iterator","next","done","id","playerId","playerid","rolltype","str","textList","substring","split","numberList","push","parseInt","actions","ruleseventboardaction","rolls","concat","fromAction","results","roll","result","fromBoardActionResult","warn","rollClass","ROLL_TYPES","ignore","argsFromXML","BlockRoll","c","max","apply","$de1762abb55249d07ce983$var$_toConsumableArray","die","dieValue","attacker","defender","ATTACKER_DOWN","BOTH_DOWN","PUSH","DEFENDER_STUMBLES","DEFENDER_DOWN","values","BLOCK","TWO_DIE_BLOCK","$de1762abb55249d07ce983$var$_get","$de1762abb55249d07ce983$var$_getPrototypeOf","call","slice","asBlockDie","resulttype","subresulttype","dieRoll","attackerSkills","skills","defenderSkills","knockdownValue","turnoverValue","includes","Block","Wrestle","Dodge","$de1762abb55249d07ce983$var$_defineProperty","ModifiedD6SumRoll","target","modifier","rest","$de1762abb55249d07ce983$var$_objectWithoutProperties","$de1762abb55249d07ce983$var$_possibleConstructorReturn","modifiedTarget","passValue","failValue","prototype","min","newSums","diceSums","face","e","f","sum","numPossible","expected","n","o","args","objOrList","ensureList","listmodifiers","dicemodifier","requirement","table","PickupRoll","ArmorRoll","WildAnimalRoll","DauntlessRoll","DodgeRoll","JumpUpRoll","PassRoll","InterceptionRoll","WakeUpRoll","GFIRoll","CatchRoll","InjuryRoll","total","injuryValue","first","second","CasualtyRoll","casValue","subtype","1","2","3","4","5","7","8","9","10","11","12","13","14","16","17","22","26","29","31","58","59","60","63","70"],"version":3,"file":"rolls.d8d018d4.js.map"}