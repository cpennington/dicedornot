function ensureList(e){return e&&e.length?e:[e]}function sample(e){return e[Math.floor(Math.random()*e.length)]}class Roll{constructor({stepIndex:e,actionIndex:t,resultIndex:a,team:l,turn:r,playerName:s,playerTeam:i,rollType:o,dice:n}){this.stepIndex=e,this.actionIndex=t,this.resultIndex=a,this.activeTeam=l,this.turn=r,this.playerName=s,this.playerTeam=i,this.rollType=o,this.dice=n}static constructFromXML(e,t,a,l,r,s){return this.ignore(t,l,s)?null:new this({stepIndex:e,actionIndex:a,resultIndex:r,team:this.activeTeamName(t),turn:this.currentTurn(t),playerName:this.currentPlayerName(t,l),playerTeam:this.currentPlayerTeam(t,l),rollType:this.rollType(s),dice:this.dice(s)})}value(e){throw"Must be defined by subclass"}get expectedValue(){throw"Must be defined by subclass"}simulateDice(){throw"Must be defined by subclass"}static ignore(){return!1}static dice(e){return this.translateStringNumberList(e.coachchoices.listdices)}get actual(){return this.dataPoint(0,this.dice,"actual")}simulated(e){return this.dataPoint(e,this.simulateDice(),"simulated")}dataPoint(e,t,a){return{iteration:e,index:this.stepIndex.toString().padStart(3,"0")+"."+this.actionIndex+"."+this.resultIndex,team:this.playerTeam||this.activeTeam,turn:this.turn,player:this.playerName,playerTeam:this.playerTeam,rollName:this.rollName||this.rollType,outcomeValue:this.value(t),expectedValue:this.expectedValue,type:a,dice:t}}static teamName(e,t){return e.boardstate.listteams.teamstate[t].data.name}static activeTeamName(e){return this.teamName(e,this.activeTeamId(e))}static activeTeamId(e){return e.boardstate.activeteam||0}static currentTurn(e){return e.boardstate.listteams.teamstate[this.activeTeamId(e)].gameturn||0}static currentPlayerName(e,t){var a=this.currentPlayer(t);for(var l of e.boardstate.listteams.teamstate)for(var r of l.listpitchplayers.playerstate)if(r.id===a)return r.data.name;console.log("No player found",{replaystep:e,action:t})}static currentPlayerTeam(e,t){var a=Roll.currentPlayer(t);for(var l of e.boardstate.listteams.teamstate)for(var r of l.listpitchplayers.playerstate)if(r.id===a)return l.data.name}static currentPlayer(e){return e.playerid}static rollType(e){return e.rolltype}static translateStringNumberList(e){if(!e)return[];for(var t=e.substring(1,e.length-1).split(","),a=[],l=0;l<t.length;l++)a.push(parseInt(t[l]));return a}static fromReplayStep(e,t){var a=t.ruleseventboardaction;if(a&&a.length){for(var l=[],r=0;r<a.length;r++){var s=a[r];l=l.concat(Roll.fromAction(e,t,r,s))}return l}return a?Roll.fromAction(e,t,0,a):[]}static fromAction(e,t,a,l){var r=l.results.boardactionresult;if(r&&r.length){for(var s=[],i=0;i<r.length;i++){var o,n=r[i];(o=this.fromBoardActionResult(e,t,a,l,i,n))&&s.push(o)}return s}if(r)return(o=this.fromBoardActionResult(e,t,a,l,0,r))?[o]:[];console.warning("Unexpectedly missing boardactionresult",{stepIndex:e,replaystep:t,action:l})}static fromBoardActionResult(e,t,a,l,r,s){if(void 0===s.rolltype)return null;if(void 0===s.coachchoices.listdices)return null;var i=ROLL_TYPES[s.rolltype];return null===i?null:i?i.constructFromXML(e,t,a,l,r,s):(console.warn("Unknown roll "+s.rolltype,{stepIndex:e,replaystep:t,actionIndex:a,action:l,resultIndex:r,boardactionresult:s}),null)}}class BlockRoll extends Roll{static rollName="Block";static dice(e){var t=super.dice(e);return t.slice(0,t.length/2).map(BlockRoll.asBlockDie)}static ignore(e,t,a){return 2!=a.resulttype}static asBlockDie(e){switch(e){case 0:return ATTACKER_DOWN;case 1:return BOTH_DOWN;case 2:return PUSH;case 3:return DEFENDER_STUMBLES;case 4:return DEFENDER_DOWN}}static dieValue(e){switch(e){case ATTACKER_DOWN:return-1;case BOTH_DOWN:return-.75;case PUSH:return.25;case DEFENDER_STUMBLES:return.75;case DEFENDER_DOWN:return 1}}value(e){return Math.max(...e.map(BlockRoll.dieValue))}get expectedValue(){return 1==this.dice.length?values=BLOCK.values.map(BlockRoll.dieValue):values=TWO_DIE_BLOCK.values.map(e=>Math.max(BlockRoll.dieValue(e[0]),BlockRoll.dieValue(e[1]))),values.reduce((e,t)=>e+t,0)/values.length}simulateDice(){return this.dice.map(()=>sample([ATTACKER_DOWN,BOTH_DOWN,PUSH,PUSH,DEFENDER_STUMBLES,DEFENDER_DOWN]))}}class FansRoll extends Roll{static constructFromXML(e,t,a,l,r,s){return teamId=s.coachchoices.concernedteam||Roll.activeTeamId(t),new this({stepIndex:e,actionIndex:a,resultIndex:r,team:Roll.teamName(t,teamId),turn:Roll.currentTurn(t),playerName:this.currentPlayerName(t,l),playerTeam:this.currentPlayerTeam(t,l),rollType:Roll.rollType(s),dice:Roll.dice(s)})}}class ModifiedD6SumRoll extends Roll{constructor({target:e,modifier:t,...a}){super(a),this.target=e,this.modifier=t}static constructFromXML(e,t,a,l,r,s){return new this({stepIndex:e,actionIndex:a,resultIndex:r,team:this.activeTeamName(t),turn:this.currentTurn(t),playerName:this.currentPlayerName(t,l),playerTeam:this.currentPlayerTeam(t,l),rollType:this.rollType(s),dice:this.dice(s),modifier:ensureList(s.listmodifiers.dicemodifier||[]).map(e=>e.value).reduce((e,t)=>e+t,0)||0,target:s.requirement})}get modifiedTarget(){return 1==this.dice.length?Math.min(6,Math.max(2,this.target-this.modifier)):this.target-this.modifier}value(e){return e.reduce((e,t)=>e+t,0)>=this.modifiedTarget?this.passValue:this.failValue}get expectedValue(){for(var e=[0],t=0;t<this.dice.length;t++){for(var a=[],l=1;l<=6;l++)for(const t of e)a.push(t+l);e=a}var r=e.length,s=0;for(const t of e)t>=this.modifiedTarget?s+=this.passValue/r:s+=this.failValue/r;return s}simulateDice(){return this.dice.map(()=>sample([1,2,3,4,5,6]))}}class PickupRoll extends ModifiedD6SumRoll{static rollName="Pickup";static passValue=1;static failValue=-1}class ArmorRoll extends ModifiedD6SumRoll{static rollName="Armor";static passValue=-1;static failValue=0}class WildAnimalRoll extends ModifiedD6SumRoll{static rollName="Wild Animal";static passValue=0;static failValue=-1}class DauntlessRoll extends ModifiedD6SumRoll{static rollName="Dauntless";static passValue=1;static failValue=-1}class DodgeRoll extends ModifiedD6SumRoll{static rollName="Dodge";static passValue=1;static failValue=-1}class JumpUpRoll extends ModifiedD6SumRoll{static rollName="Jump Up";static passValue=1;static failValue=0}class PassRoll extends ModifiedD6SumRoll{static rollName="Pass";static passValue=1;static failValue=-1}class InterceptionRoll extends ModifiedD6SumRoll{static rollName="Interception";static passValue=1;static failValue=0}class WakeUpRoll extends ModifiedD6SumRoll{static rollName="Wake Up";static passValue=1;static failValue=-1}class GFIRoll extends ModifiedD6SumRoll{static rollName="GFI";static passValue=0;static failValue=-1}class CatchRoll extends ModifiedD6SumRoll{static rollName="Catch";static passValue=1;static failValue=-1}class InjuryRoll extends Roll{static rollName="Injury";injuryValue(e){return e<=7?0:e<=9?-.5:-1}value(e){var t=e[0]+e[1];return this.injuryValue(t)}get expectedValue(){for(var e=0,t=1;t<=6;t++)for(var a=1;a<=6;a++)e+=this.injuryValue(t+a);return e/36}simulateDice(){return this.dice.map(()=>sample([1,2,3,4,5,6]))}}class CasualtyRoll extends Roll{static rollName="Casualty";static dice(e){var t=super.dice(e);return[(t=t.slice(0,t.length/2))[t.length-1]]}value(e){return e<=30?0:40==e?-.5:50==e?-.75:-1}get expectedValue(){for(var e=0,t=1;t<=6;t++)for(var a=1;a<=8;a++)e+=this.value(10*t+a);return e/48}simulateDice(){return 10*sample([1,2,3,4,5,6])+sample([1,2,3,4,5,6,7,8])}}const ROLL_TYPES={1:GFIRoll,2:DodgeRoll,3:ArmorRoll,4:InjuryRoll,5:BlockRoll,7:PickupRoll,8:CasualtyRoll,9:CatchRoll,10:null,11:null,12:PassRoll,13:null,14:null,16:InterceptionRoll,17:WakeUpRoll,22:WildAnimalRoll,26:null,29:DauntlessRoll,31:JumpUpRoll,58:null,59:ArmorRoll,60:InjuryRoll,63:null,70:null};