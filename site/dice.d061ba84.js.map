{"mappings":"YAMWA,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpBA,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,QAE/BC,EAAQD,EAAI,CAAA,KATA,KACL,IAAA,IACa,KACJ,QAuCtB,SAAcE,EAASC,GACrBA,EAAUA,GAAWC,EADS,IAE1BC,EAASH,EAAQI,QAAQD,OAFCE,GAAA,EAAAC,GAAA,EAAAC,OAAA,EAAA,IAG9B,IAAA,IAAAC,EAAAC,EAAkBT,EAAlBU,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2B,CAAA,IAAhBP,EAAgBU,EAAAM,MACrBC,EAAa,GADQC,GAAA,EAAAC,GAAA,EAAAC,OAAA,EAAA,IAEzB,IAAA,IAAAC,EAAAC,EAAuBjB,EAAvBO,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAA+B,CAAA,IAApBK,EAAoBF,EAAAL,MAAAQ,GAAA,EAAAC,GAAA,EAAAC,OAAA,EAAA,IAC7B,IAAA,IAAAC,EAAWX,EAAXY,EAAoB5B,EAAIK,OAAxBO,OAAAC,cAAAW,GAAAG,EAAAC,EAAAd,QAAAC,MAAAS,GAAA,EAAWR,EAAXW,EAAAX,MACEC,EAAWY,KAAK1B,EAAQoB,EAAUP,IAFP,MAAAc,GAAAL,GAAA,EAAAC,EAAAI,EAAA,QAAA,IAAAN,GAAA,MAAAI,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAH,EAAA,MAAAC,KAFN,MAAAI,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAI,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAH,EAAA,MAAAC,GAOzBf,EAASY,GAVmB,MAAAa,GAAAtB,GAAA,EAAAC,EAAAqB,EAAA,QAAA,IAAAvB,GAAA,MAAAI,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAH,EAAA,MAAAC,GAYvBT,EAAIK,GApCS0B,CAAK,CAAC9B,EAAOA,IAEnC,SAAS+B,EAAO3B,GAAQ,IAElB4B,EADAC,EAAK,GADa3B,GAAA,EAAAC,GAAA,EAAAC,OAAA,EAAA,IAGtB,IAAA,IAAAC,EAAWM,EAAXmB,EAAoB9B,EAApBO,OAAAC,cAAAN,GAAAG,EAAAyB,EAAArB,QAAAC,MAAAR,GAAA,EAA4B,CAAjBS,EAAiBN,EAAAM,MAC1BiB,GAAU,EADgB,IAAAG,GAAA,EAAAlB,GAAA,EAAAC,OAAA,EAAA,IAE1B,IAAA,IAAAC,EAAWG,EAAXD,EAAuBY,EAAvBtB,OAAAC,cAAAuB,GAAAhB,EAAAE,EAAAR,QAAAC,MAAAqB,GAAA,EAAWb,EAAXH,EAAAJ,MACEiB,EAAaA,GAAcI,EAAEC,QAAQtB,EAAOO,GAHpB,MAAAO,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,QAAA,IAAAM,GAAA,MAAAd,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAJ,EAAA,MAAAC,GAKrBc,GACHC,EAAGL,KAAKb,IATU,MAAAc,GAAAtB,GAAA,EAAAC,EAAAqB,EAAA,QAAA,IAAAvB,GAAA,MAAA4B,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAA3B,EAAA,MAAAC,GAYtB,OAAOyB,EAGT,SAASlC,EAAIK,GACX,MAAO,CACLA,OAAQA,EACRkC,MAAOP,EAAO3B,IAmBlB,SAASD,EAAOmB,EAAUP,GAAO,MACR,gBAAZO,EACF,CAACP,GAASO,EAEV,CAACA,EAAUP","sources":["./src/js/dice.js"],"sourcesContent":["const ATTACKER_DOWN = \"AD\";\nconst BOTH_DOWN = \"BD\";\nconst PUSH = \"P\";\nconst DEFENDER_STUMBLES = \"DS\";\nconst DEFENDER_DOWN = \"DD\";\n\nconst D6 = die([1, 2, 3, 4, 5, 6]);\n\nconst D8 = die([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconst BLOCK = die([\n  ATTACKER_DOWN,\n  BOTH_DOWN,\n  PUSH,\n  PUSH,\n  DEFENDER_STUMBLES,\n  DEFENDER_DOWN\n]);\n\nconst TWO_DIE_BLOCK = dice([BLOCK, BLOCK]);\n\nfunction unique(values) {\n  var us = [];\n  var already_in;\n  for (const value of values) {\n    already_in = false;\n    for (const existing of us) {\n      already_in = already_in || _.isEqual(value, existing);\n    }\n    if (!already_in) {\n      us.push(value);\n    }\n  }\n  return us;\n}\n\nfunction die(values) {\n  return {\n    values: values,\n    range: unique(values)\n  };\n}\n\nfunction dice(to_roll, combine) {\n  combine = combine || append;\n  var values = to_roll.shift().values;\n  for (const die of to_roll) {\n    var new_values = [];\n    for (const existing of values) {\n      for (const value of die.values) {\n        new_values.push(combine(existing, value));\n      }\n    }\n    values = new_values;\n  }\n  return die(values);\n}\n\nfunction append(existing, value) {\n  if (typeof existing == \"array\") {\n    return [value] + existing;\n  } else {\n    return [existing, value];\n  }\n}\n"],"names":["die","BLOCK","to_roll","combine","append","values","shift","d","e","f","g","h","Symbol","iterator","next","done","value","new_values","k","l","m","n","o","existing","q","r","s","t","v","push","a","dice","unique","already_in","us","i","j","_","isEqual","range"],"version":3,"file":"dice.d061ba84.js.map"}