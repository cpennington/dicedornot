{"mappings":"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","sources":["./home/cpennington/personal/onesandskulls/node_modules/@parcel/scope-hoisting/lib/prelude.js","./src/js/rolls.js"],"sourcesContent":[null,"import {\n  ATTACKER_DOWN,\n  PUSH,\n  BOTH_DOWN,\n  DEFENDER_STUMBLES,\n  DEFENDER_DOWN,\n  TWO_DIE_BLOCK,\n  BLOCK,\n} from \"./dice\";\nimport { skillNames, skills } from \"./constants\";\n\n// TODO: Switch over to using dice.js for better clarity\n\nfunction ensureList(objOrList) {\n  if (objOrList && objOrList.length) {\n    return objOrList;\n  } else {\n    return [objOrList];\n  }\n}\n\nfunction sample(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nclass Player {\n  #teamData;\n  teamId;\n  #playerData;\n  playerId;\n\n  constructor({ teamData, teamId, playerData, playerId }) {\n    this.teamData = teamData;\n    this.teamId = teamId;\n    this.playerData = playerData;\n    this.playerId = playerId;\n  }\n\n  get name() {\n    return this.playerData.data.name;\n  }\n\n  get teamName() {\n    return this.teamData.data.name;\n  }\n  get skills() {\n    return Roll.translateStringNumberList(this.playerData.data.listskills);\n  }\n}\n\nexport class Roll {\n  constructor(attrs) {\n    Object.assign(this, attrs);\n  }\n  static argsFromXML(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    var playerData = this.currentPlayerData(replaystep, action);\n    return {\n      replaystep,\n      action,\n      boardactionresult,\n      stepIndex,\n      actionIndex,\n      resultIndex,\n      team: this.activeTeamName(replaystep),\n      teamId: this.activeTeamId(replaystep),\n      turn: this.currentTurn(replaystep),\n      playerName: playerData.player.data.name,\n      playerTeam: playerData.team.data.name,\n      playerTeamId: playerData.teamId,\n      playerSkills: this.translateStringNumberList(\n        playerData.player.data.listskills\n      ),\n      rollType: this.rollType(boardactionresult),\n      dice: this.dice(boardactionresult),\n    };\n  }\n  value(dice) {\n    throw \"value must be defined by subclass\";\n  }\n  get expectedValue() {\n    throw \"expectedValue must be defined by subclass\";\n  }\n  simulateDice() {\n    throw \"simulateDice must be defined by subclass\";\n  }\n  static valueTable() {\n    throw \"valueTable must be defined by subclass\";\n  }\n\n  static ignore() {\n    return false;\n  }\n  static dice(boardactionresult) {\n    return this.translateStringNumberList(\n      boardactionresult.coachchoices.listdices\n    );\n  }\n  get actual() {\n    return Object.assign(this.dataPoint(0, this.dice, \"actual\"), {\n      turn: this.turn,\n      player: this.playerName,\n      playerSkills: this.playerSkills.map(skill => skillNames[skill]),\n      rollName: this.constructor.rollName || this.rollName || this.rollType,\n      dice: this.dice\n    });\n  }\n  simulated(iteration) {\n    return this.dataPoint(iteration, this.simulateDice(), \"simulated\");\n  }\n\n  dataPoint(iteration, dice, type) {\n    return {\n      iteration: iteration,\n      index:\n        this.stepIndex.toString().padStart(3, \"0\") +\n        \".\" +\n        this.actionIndex +\n        \".\" +\n        this.resultIndex,\n      team: this.playerTeam\n        ? this.playerTeamId + \". \" + this.playerTeam\n        : this.activeTeamId + \". \" + this.activeTeam,\n      outcomeValue: this.value(dice),\n      type: type,\n      expectedValue: this.expectedValue\n    };\n  }\n\n  static teamName(replaystep, teamId) {\n    return replaystep.boardstate.listteams.teamstate[teamId].data.name;\n  }\n  static activeTeamName(replaystep) {\n    return this.teamName(replaystep, this.activeTeamId(replaystep));\n  }\n  static activeTeamId(replaystep) {\n    return replaystep.boardstate.activeteam || 0;\n  }\n  static currentTurn(replaystep) {\n    return (\n      replaystep.boardstate.listteams.teamstate[this.activeTeamId(replaystep)]\n        .gameturn || 0\n    );\n  }\n\n  static currentPlayerData(replaystep, action) {\n    var currentId = this.currentPlayer(action);\n    var teams = replaystep.boardstate.listteams.teamstate;\n    for (var teamId = 0; teamId < teams.length; teamId++) {\n      var team = teams[teamId];\n      for (var player of team.listpitchplayers.playerstate) {\n        if (player.id === currentId) {\n          return { team, teamId, player, playerId: player.id };\n        }\n      }\n    }\n    console.log(\"No player found\", { replaystep, action });\n  }\n\n  static currentPlayer(action) {\n    return action.playerid;\n  }\n  static rollType(boardactionresult) {\n    return boardactionresult.rolltype;\n  }\n\n  static translateStringNumberList(str) {\n    if (!str) return [];\n\n    var stripped = str.substring(1, str.length - 1);\n    var textList = stripped.split(\",\");\n\n    var numberList = [];\n    for (var i = 0; i < textList.length; i++) {\n      numberList.push(parseInt(textList[i]));\n    }\n    return numberList;\n  }\n\n  static fromReplayStep(stepIndex, replaystep) {\n    var actions = replaystep.ruleseventboardaction;\n    if (actions && actions.length) {\n      var rolls = [];\n      for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n        var action = actions[actionIndex];\n        rolls = rolls.concat(\n          Roll.fromAction(stepIndex, replaystep, actionIndex, action)\n        );\n      }\n      return rolls;\n    } else if (actions) {\n      return Roll.fromAction(stepIndex, replaystep, 0, actions);\n    } else {\n      return [];\n    }\n  }\n\n  static fromAction(stepIndex, replaystep, actionIndex, action) {\n    var results = action.results.boardactionresult;\n    if (results && results.length) {\n      var rolls = [];\n      for (var resultIndex = 0; resultIndex < results.length; resultIndex++) {\n        var result = results[resultIndex];\n        var roll = this.fromBoardActionResult(\n          stepIndex,\n          replaystep,\n          actionIndex,\n          action,\n          resultIndex,\n          result\n        );\n        if (roll) {\n          rolls.push(roll);\n        }\n      }\n      return rolls;\n    } else if (results) {\n      var roll = this.fromBoardActionResult(\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        0,\n        results\n      );\n      if (roll) {\n        return [roll];\n      } else {\n        return [];\n      }\n    } else {\n      console.warn(\"Unexpectedly missing boardactionresult\", {\n        stepIndex,\n        replaystep,\n        action,\n      });\n      return [];\n    }\n  }\n  static fromBoardActionResult(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    if (boardactionresult.rolltype === undefined) {\n      return null;\n    }\n    if (boardactionresult.coachchoices.listdices === undefined) {\n      return null;\n    }\n    var rollClass = ROLL_TYPES[boardactionresult.rolltype];\n    if (rollClass === null) {\n      return null;\n    }\n\n    if (rollClass) {\n      if (rollClass.ignore(replaystep, action, boardactionresult)) {\n        return null;\n      } else {\n        return new rollClass(\n          rollClass.argsFromXML(\n            stepIndex,\n            replaystep,\n            actionIndex,\n            action,\n            resultIndex,\n            boardactionresult\n          )\n        );\n      }\n    } else {\n      console.warn(\"Unknown roll \" + boardactionresult.rolltype, {\n        stepIndex,\n        replaystep,\n        actionIndex,\n        action,\n        resultIndex,\n        boardactionresult,\n      });\n      return null;\n    }\n  }\n}\n\nclass BlockRoll extends Roll {\n  static rollName = \"Block\";\n\n  static dice(boardactionresult) {\n    var dice = super.dice(boardactionresult);\n    // Block dice are doubled up, only use the first half of the dice list.\n    return dice.slice(0, dice.length / 2).map(BlockRoll.asBlockDie);\n  }\n\n  static ignore(replaystep, action, boardactionresult) {\n    // Block dice have dice repeated for the coaches selection, resulttype is missing for the second one\n    if (boardactionresult.resulttype != 2) {\n      return true;\n    }\n    if (boardactionresult.subresulttype == 35) {\n      // Opponent picking whether to activate fend\n      return true;\n    }\n    return false;\n  }\n\n  static asBlockDie(dieRoll) {\n    switch (dieRoll) {\n      case 0:\n        return ATTACKER_DOWN;\n      case 1:\n        return BOTH_DOWN;\n      case 2:\n        return PUSH;\n      case 3:\n        return DEFENDER_STUMBLES;\n      case 4:\n        return DEFENDER_DOWN;\n    }\n  }\n\n  static dieValue(result, attackerSkills, defenderSkills) {\n    var attackerSkills = attackerSkills || [];\n    var defenderSkills = defenderSkills || [];\n\n    switch (result) {\n      case ATTACKER_DOWN:\n        return -1;\n      case BOTH_DOWN:\n        if (attackerSkills.includes(skills.Block)) {\n          if (defenderSkills.includes(skills.Block)) {\n            return 0;\n          } else {\n            return 0.75;\n          }\n        } else if (attackerSkills.includes(skills.Wrestle)) {\n          return 0.5;\n        } else {\n          return -1;\n        }\n      case PUSH:\n        return 0.25;\n      case DEFENDER_STUMBLES:\n        if (defenderSkills.includes(skills.Dodge)) {\n          return 0;\n        } else {\n          return 1;\n        }\n      case DEFENDER_DOWN:\n        return 1;\n    }\n  }\n  value(dice) {\n    // TODO: Handle values based on skills\n    // TODO: Red Dice?\n    var aSkills = this.playerSkills;\n    return Math.max(...dice.map(die => BlockRoll.dieValue(die, aSkills)));\n  }\n  get expectedValue() {\n    var values;\n    if (this.dice.length == 1) {\n      values = BLOCK.values.map((dice) => this.value([dice]));\n    } else {\n      values = TWO_DIE_BLOCK.values.map((dice) => this.value(dice));\n    }\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n  simulateDice() {\n    return this.dice.map(() =>\n      sample([\n        ATTACKER_DOWN,\n        BOTH_DOWN,\n        PUSH,\n        PUSH,\n        DEFENDER_STUMBLES,\n        DEFENDER_DOWN,\n      ])\n    );\n  }\n  static valueTable() {\n    return {\n      [`${this.rollName} - Attacker Down`]: this.dieValue(ATTACKER_DOWN),\n      [`${this.rollName} - Both Down`]: this.dieValue(BOTH_DOWN),\n      [`${this.rollName} - Both Down (Block vs None)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Block]\n      ),\n      [`${this.rollName} - Both Down (Wrestle vs Anything)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Wrestle]\n      ),\n      [`${this.rollName} - Both Down (Block vs Block)`]: this.dieValue(\n        BOTH_DOWN,\n        [skills.Block],\n        [skills.Block]\n      ),\n      [`${this.rollName} - Both Down (None vs Block)`]: this.dieValue(\n        BOTH_DOWN,\n        [],\n        [skills.Block]\n      ),\n      [`${this.rollName} - Push`]: this.dieValue(PUSH),\n      [`${this.rollName} - Defender Stumbles`]: this.dieValue(\n        DEFENDER_STUMBLES\n      ),\n      [`${this.rollName} - Defender Down`]: this.dieValue(DEFENDER_DOWN)\n    };\n  }\n}\n\nclass FansRoll extends Roll {\n  // TODO: Need to capture both teams rolls, because result is about comparison.\n}\n\nclass ModifiedD6SumRoll extends Roll {\n  constructor({ target, modifier, ...rest }) {\n    super(rest);\n    this.target = target;\n    this.modifier = modifier;\n  }\n  static argsFromXML(\n    stepIndex,\n    replaystep,\n    actionIndex,\n    action,\n    resultIndex,\n    boardactionresult\n  ) {\n    var args = super.argsFromXML(\n      stepIndex,\n      replaystep,\n      actionIndex,\n      action,\n      resultIndex,\n      boardactionresult\n    );\n    args.modifier =\n      ensureList(boardactionresult.listmodifiers.dicemodifier || [])\n        .map((modifier) => modifier.value)\n        .reduce((a, b) => a + b, 0) || 0;\n    args.target = boardactionresult.requirement;\n    return args;\n  }\n\n  get actual() {\n    return Object.assign(super.actual, {\n      target: this.modifiedTarget,\n    });\n  }\n  get modifiedTarget() {\n    if (this.dice.length == 1) {\n      return Math.min(6, Math.max(2, this.target - this.modifier));\n    } else {\n      return this.target - this.modifier;\n    }\n  }\n  value(dice) {\n    if (dice.reduce((a, b) => a + b, 0) >= this.modifiedTarget) {\n      return this.constructor.passValue;\n    } else {\n      return this.constructor.failValue;\n    }\n  }\n  get expectedValue() {\n    var diceSums = [0];\n    for (var die = 0; die < this.dice.length; die++) {\n      var newSums = [];\n      for (var face = 1; face <= 6; face++) {\n        for (const sum of diceSums) {\n          newSums.push(sum + face);\n        }\n      }\n      diceSums = newSums;\n    }\n\n    var numPossible = diceSums.length;\n    var expected = 0;\n    for (const sum of diceSums) {\n      if (sum >= this.modifiedTarget) {\n        expected += this.constructor.passValue / numPossible;\n      } else {\n        expected += this.constructor.failValue / numPossible;\n      }\n    }\n    return expected;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Pass`] = this.passValue;\n    table[`${this.rollName} - Fail`] = this.failValue;\n    return table;\n  }\n}\n\nclass PickupRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pickup\";\n  static passValue = 1;\n  static failValue = -1;\n}\nclass ArmorRoll extends ModifiedD6SumRoll {\n  static rollName = \"Armor\";\n  static passValue = -1;\n  static failValue = 0;\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Break`] = this.passValue;\n    table[`${this.rollName} - Save`] = this.failValue;\n    return table;\n  }\n}\n\nclass WildAnimalRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wild Animal\";\n  static passValue = 0;\n  static failValue = -1;\n}\n\nclass DauntlessRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dauntless\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass DodgeRoll extends ModifiedD6SumRoll {\n  static rollName = \"Dodge\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass JumpUpRoll extends ModifiedD6SumRoll {\n  static rollName = \"Jump Up\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass PassRoll extends ModifiedD6SumRoll {\n  static rollName = \"Pass\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass InterceptionRoll extends ModifiedD6SumRoll {\n  // TODO: Player/team seems incorrect. Double-check w/ in-game replay viewer\n  static rollName = \"Interception\";\n  static passValue = 1;\n  static failValue = 0;\n}\n\nclass WakeUpRoll extends ModifiedD6SumRoll {\n  static rollName = \"Wake Up\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass GFIRoll extends ModifiedD6SumRoll {\n  static rollName = \"GFI\";\n  static passValue = 0;\n  static failValue = -1;\n}\n\nclass CatchRoll extends ModifiedD6SumRoll {\n  static rollName = \"Catch\";\n  static passValue = 1;\n  static failValue = -1;\n}\n\nclass InjuryRoll extends Roll {\n  static rollName = \"Injury\";\n  // TODO: Handle skills\n  static injuryValue(total) {\n    if (total <= 7) {\n      return 0; // Only stunned, best outcome\n    } else if (total <= 9) {\n      return -0.5; // KO\n    } else {\n      return -1; // CAS\n    }\n  }\n  value(dice) {\n    var total = dice[0] + dice[1];\n    return this.constructor.injuryValue(total);\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var first = 1; first <= 6; first++) {\n      for (var second = 1; second <= 6; second++) {\n        expected += this.value([first, second]);\n      }\n    }\n    return expected / 36;\n  }\n  simulateDice() {\n    return this.dice.map(() => sample([1, 2, 3, 4, 5, 6]));\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Stun`] = this.injuryValue(7);\n    table[`${this.rollName} - KO`] = this.injuryValue(9);\n    table[`${this.rollName} - Casualty`] = this.injuryValue(12);\n    return table;\n  }\n}\n\nclass CasualtyRoll extends Roll {\n  static rollName = \"Casualty\";\n  // TODO: Handle skills\n  // TODO: Selecting the Apo result seems to read as a separate roll\n\n  static dice(boardactionresult) {\n    // Casualty dice are also doubled up, and also both rolls appear when an apoc is used (so the last one is the valid one)\n    var dice = super.dice(boardactionresult);\n    dice = dice.slice(0, dice.length / 2);\n    return [dice[dice.length - 1]];\n  }\n  static casValue(dice) {\n    if (dice < 4) {\n      return 0; // Badly Hurt\n    } else if (dice < 50) {\n      return -0.5; // MNG\n    } else if (dice < 60) {\n      return -0.75; // Stat Damage\n    } else {\n      return -1; // Dead\n    }\n  }\n  value(dice) {\n    return this.constructor.casValue(dice);\n  }\n  get expectedValue() {\n    var expected = 0;\n    for (var type = 1; type <= 6; type++) {\n      for (var subtype = 1; subtype <= 8; subtype++) {\n        expected += this.value(type * 10 + subtype);\n      }\n    }\n    return expected / 48;\n  }\n  simulateDice() {\n    return sample([1, 2, 3, 4, 5, 6]) * 10 + sample([1, 2, 3, 4, 5, 6, 7, 8]);\n  }\n  static valueTable() {\n    var table = {};\n    table[`${this.rollName} - Badly Hurt`] = this.casValue(35);\n    table[`${this.rollName} - Miss Next game`] = this.casValue(45);\n    table[`${this.rollName} - Stat Damage`] = this.casValue(55);\n    table[`${this.rollName} - Dead`] = this.casValue(65);\n    return table;\n  }\n}\n\nexport const ROLL_TYPES = {\n  1: GFIRoll,\n  2: DodgeRoll,\n  3: ArmorRoll,\n  4: InjuryRoll,\n  5: BlockRoll,\n  //6: StandUpRoll,\n  7: PickupRoll,\n  8: CasualtyRoll,\n  9: CatchRoll,\n  10: null, // Kickoff Scatter\n  11: null, // Throw-in Roll\n  12: PassRoll,\n  13: null, // Push\n  14: null, // Follow up\n  16: InterceptionRoll,\n  17: WakeUpRoll,\n  //20: BoneHeadRoll,\n  //21: ReallyStupidRoll,\n  22: WildAnimalRoll,\n  //23: LonerRoll,\n  //24: LandingRoll,\n  26: null, // Inaccurate Pass Scatter\n  //27: AlwaysHungryRoll,\n  29: DauntlessRoll,\n  31: JumpUpRoll,\n  // 34: StabRoll,\n  // 36: LeapRoll,\n  // 37: FoulAppearanceRoll,\n  // 40: TakeRootRoll,\n  // 42: HailMaryPassRoll,\n  // 45: ProRoll,\n  // 46: HypnoticGazeRoll,\n  // 54: FireballRoll,\n  // 55: LightningBoltRoll,\n  // 56: ThrowTeammateRoll,\n  58: null, // Kickoff Gust\n  59: ArmorRoll,\n  60: InjuryRoll,\n  63: null, // Carrier KD scatter\n  // 69: FansRoll,\n  70: null, // Weather\n};\n\n// TODO: Parse Kickoff events\n"],"names":["$parcel$modules","$parcel$bundles","globalObject","globalThis","self","window","global","parcelRequire","name","module","require","err","Error","code","register","id","exports","registerBundle","fn","sample","list","Math","floor","random","length","Roll","a","attrs","$de1762abb55249d07ce983$var$_classCallCheck","this","Object","assign","iteration","dataPoint","simulateDice","dice","type","index","stepIndex","toString","padStart","actionIndex","resultIndex","team","playerTeam","playerTeamId","activeTeamId","activeTeam","outcomeValue","value","expectedValue","turn","player","playerName","playerSkills","map","skill","skillNames","rollName","constructor","rollType","replaystep","action","boardactionresult","playerData","currentPlayerData","activeTeamName","teamId","currentTurn","data","translateStringNumberList","listskills","coachchoices","listdices","boardstate","listteams","teamstate","teamName","activeteam","gameturn","currentId","currentPlayer","teams","g","h","i","j","l","listpitchplayers","playerstate","Symbol","iterator","next","done","playerId","console","log","playerid","rolltype","str","textList","substring","split","numberList","push","parseInt","actions","ruleseventboardaction","rolls","concat","fromAction","results","roll","result","fromBoardActionResult","warn","rollClass","ROLL_TYPES","ignore","argsFromXML","BlockRoll","aSkills","max","apply","$de1762abb55249d07ce983$var$_toConsumableArray","die","dieValue","ATTACKER_DOWN","BOTH_DOWN","PUSH","DEFENDER_STUMBLES","DEFENDER_DOWN","values","b","BLOCK","TWO_DIE_BLOCK","reduce","$de1762abb55249d07ce983$var$_get","$de1762abb55249d07ce983$var$_getPrototypeOf","call","slice","asBlockDie","resulttype","subresulttype","dieRoll","attackerSkills","defenderSkills","includes","skills","Block","Wrestle","Dodge","$de1762abb55249d07ce983$var$_defineProperty","ModifiedD6SumRoll","c","target","modifier","rest","$de1762abb55249d07ce983$var$_objectWithoutProperties","$de1762abb55249d07ce983$var$_possibleConstructorReturn","modifiedTarget","passValue","failValue","prototype","min","newSums","diceSums","face","e","f","sum","numPossible","expected","n","o","args","objOrList","ensureList","listmodifiers","dicemodifier","requirement","table","PickupRoll","ArmorRoll","WildAnimalRoll","DauntlessRoll","DodgeRoll","JumpUpRoll","PassRoll","InterceptionRoll","WakeUpRoll","GFIRoll","CatchRoll","InjuryRoll","total","injuryValue","first","second","CasualtyRoll","casValue","subtype","1","2","3","4","5","7","8","9","10","11","12","13","14","16","17","22","26","29","31","58","59","60","63","70"],"version":3,"file":"rolls.0e4d4c69.js.map"}