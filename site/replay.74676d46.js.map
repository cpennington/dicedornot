{"mappings":"uBAEAA,mDAAAC,0EAEsB,CACpBC,cAAe,SAAUC,GAIvB,IAAIC,EA0BR,SAA4BC,GAAY,IAClCC,EAAYD,EAAWE,OAAOC,WAAW,GACzCC,EACFJ,EAAWE,OAAOC,WAAWH,EAAWE,OAAOC,WAAWE,OAAS,GAErE,MAAO,CAELC,YAAaL,EAAUM,UAAUC,YAEjCC,SAAU,CACRC,UAAWT,EAAUM,UAAUI,aAAaC,WAAW,GAAGC,OAC1DC,SAAUb,EAAUc,WAAWC,UAAUC,UAAU,GAAGnB,KAAKoB,KAC3DC,OAAQlB,EAAUc,WAAWC,UAAUC,UAAU,GAAGnB,KAAKsB,OACzDC,MAAOjB,EAASkB,uBAAuBC,YAAYC,IAAIC,WAAa,GAEtEC,SAAU,CACRhB,UAAWT,EAAUM,UAAUI,aAAaC,WAAW,GAAGC,OAC1DC,SAAUb,EAAUc,WAAWC,UAAUC,UAAU,GAAGnB,KAAKoB,KAC3DC,OAAQlB,EAAUc,WAAWC,UAAUC,UAAU,GAAGnB,KAAKsB,OACzDC,MAAOjB,EAASkB,uBAAuBC,YAAYC,IAAIG,WAAa,IA7CpDC,CAAmB9B,GACrC+B,QAAQC,IAAI,4BAA6B/B,GAIzC,IAAA,IAKMgC,EANFC,EAAQ,GAENC,EAAY,EAChBA,EAAYnC,EAAKI,OAAOC,WAAWE,OACnC4B,IAEIF,EAAajC,EAAKI,OAAOC,WAAW8B,GAGxCD,EAAQA,EAAME,OAAOC,EAAAA,KAAKC,eAAeH,EAAWF,IAItD,OAFAF,QAAQC,IAAI,qBAAsBE,GAE3B,CACLjC,YAAaA,EACbsC,cAhBkB,GAiBlBL,MAAOA,EACPM,QAAS","sources":["./src/js/replay.js"],"sourcesContent":["/* Minifier: http://jscompress.com/ */\n\nimport { Roll } from \"./rolls\";\n\nexport const replay = {\n  processReplay: function (data) {\n    //console.log(\"replay.processReplay\");\n    //console.log(data);\n\n    var gameDetails = extractGameDetails(data);\n    console.log(\"Extracted game details...\", gameDetails);\n\n    var playerDetails = {};\n    var rolls = [];\n    for (\n      var stepIndex = 0;\n      stepIndex < data.replay.replaystep.length;\n      stepIndex++\n    ) {\n      var replayStep = data.replay.replaystep[stepIndex];\n      // extractPlayerDetails(replayStep, playerDetails);\n      //extractActionsFromStep(replayStep, rolls);\n      rolls = rolls.concat(Roll.fromReplayStep(stepIndex, replayStep));\n    }\n    console.log(\"Extracted rolls...\", rolls);\n\n    return {\n      gameDetails: gameDetails,\n      playerDetails: playerDetails,\n      rolls: rolls,\n      version: 1,\n    };\n  },\n};\n\nfunction extractGameDetails(jsonObject) {\n  var firstStep = jsonObject.replay.replaystep[0];\n  var lastStep =\n    jsonObject.replay.replaystep[jsonObject.replay.replaystep.length - 1];\n\n  return {\n    //fileName: lastStep.ruleseventgamefinished.matchresult.row.replayfilename,\n    stadiumName: firstStep.gameinfos.namestadium,\n    //stadiumType: firstStep.gameinfos.stadium,\n    homeTeam: {\n      coachName: firstStep.gameinfos.coachesinfos.coachinfos[0].userid,\n      teamName: firstStep.boardstate.listteams.teamstate[0].data.name,\n      raceId: firstStep.boardstate.listteams.teamstate[0].data.idrace,\n      score: lastStep.ruleseventgamefinished.matchresult.row.homescore || 0,\n    },\n    awayTeam: {\n      coachName: firstStep.gameinfos.coachesinfos.coachinfos[1].userid,\n      teamName: firstStep.boardstate.listteams.teamstate[1].data.name,\n      raceId: firstStep.boardstate.listteams.teamstate[1].data.idrace,\n      score: lastStep.ruleseventgamefinished.matchresult.row.awayscore || 0,\n    },\n  };\n}\n\nfunction translateStringNumberList(str) {\n  if (!str) return [];\n\n  var stripped = str.substring(1, str.length - 1);\n  var textList = stripped.split(\",\");\n\n  var numberList = [];\n  for (var i = 0; i < textList.length; i++) {\n    numberList.push(parseInt(textList[i]));\n  }\n  return numberList;\n}\n\nfunction extractPlayerDetails(replayStep, playerDetails) {\n  var teamStates = (((replayStep || {}).boardstate || {}).listteams || {})\n    .teamstate;\n  if (!teamStates || teamStates.length < 2) return;\n\n  extractPlayerDetailsFromTeamState(teamStates[0], playerDetails);\n  extractPlayerDetailsFromTeamState(teamStates[1], playerDetails);\n}\n\nfunction extractPlayerDetailsFromTeamState(teamState, playerDetails) {\n  var players = ((teamState || {}).listpitchplayers || {}).playerstate;\n  if (!players) return;\n\n  for (var i = 0; i < players.length; i++) {\n    var player = players[i];\n    if (!(player.id in playerDetails)) {\n      playerDetails[player.id] = {\n        id: player.id,\n        teamId: player.data.teamid || 0,\n        type: player.data.idplayertypes,\n        name: player.data.name,\n        // player.data.name is sometimes useful but not populated for hired players\n      };\n    }\n  }\n}\n\nfunction extractActionsFromStep(replayStep, actionsList) {\n  var kickoffDetails = extractKickoffDetails(replayStep);\n  if (kickoffDetails) {\n    actionsList.push(kickoffDetails);\n  }\n\n  var actions = replayStep.ruleseventboardaction;\n  if (actions && actions.length) {\n    for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n      var action = actions[actionIndex];\n      processAction(replayStep, action, actionsList);\n    }\n  } else if (actions) {\n    processAction(replayStep, actions, actionsList);\n  }\n}\n\nfunction processAction(replayStep, action, actionsList) {\n  if (!action) return;\n\n  var results = action.results.boardactionresult;\n  if (results && results.length) {\n    for (var resultIndex = 0; resultIndex < results.length; resultIndex++) {\n      var result = results[resultIndex];\n      processResult(replayStep, action, result, actionsList);\n    }\n  } else {\n    processResult(replayStep, action, results, actionsList);\n  }\n}\n\nfunction processResult(replayStep, action, result, actionsList) {\n  if (!result) return;\n\n  if (result.coachchoices && result.coachchoices.listdices) {\n    var actionDetails = extractActionDetails(replayStep, action, result);\n\n    if (actionDetails) {\n      actionsList.push(actionDetails);\n    }\n  }\n}\n\nfunction extractActionDetails(replayStep, action, result) {\n  if (ignoreResult(result)) {\n    return null;\n  }\n  console.log(action);\n  var dice = translateDice(result.coachchoices.listdices, result.rolltype);\n\n  // Translate kickoff scatters to their own type\n  if (result.rolltype == 10 && dice.length > 1) {\n    result.rolltype = -2;\n  }\n\n  return {\n    team: replayStep.boardstate.activeteam || 0,\n    turn:\n      replayStep.boardstate.listteams.teamstate[\n        replayStep.boardstate.activeteam || 0\n      ].gameturn || 0,\n    player: action.playerid,\n    rollType: result.rolltype,\n    dice: dice,\n    outcomeValue: outcomeValue(\n      result.rolltype,\n      dice,\n      action.playerid,\n      action.targetid\n    ),\n    expectedValue: expectedValue(\n      result.rolltype,\n      dice,\n      action.playerid,\n      action.targetid\n    ),\n  };\n}\n\nfunction expectedValue(rollType, rollResult, player, target) {\n  if (rollType == ROLL_BLOCK) {\n    if (rollResult.length == 1) {\n      values = BLOCK.values.map(blockResultValue);\n    } else {\n      values = TWO_DIE_BLOCK.values.map((dice) =>\n        Math.max(blockResultValue(dice[0]), blockResultValue(dice[1]))\n      );\n    }\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n  return 0;\n}\n\nfunction outcomeValue(rollType, rollResult, player, target) {\n  if (rollType == ROLL_BLOCK) {\n    if (rollResult.length == 1) {\n      return blockResultValue(asBlockDie(rollResult));\n    } else {\n      return Math.max(...rollResult.map(asBlockDie).map(blockResultValue));\n    }\n  }\n  return 0;\n}\n\nfunction ignoreResult(result) {\n  // As far as I can tell, this comes up when a reroll was possible but not used\n  if (result.rollstatus == 2) {\n    return true;\n  }\n\n  // This is the foul penalty - the roll is already covered by an armour roll\n  if (result.rolltype == 15) {\n    return true;\n  }\n\n  // This is some sort of wrestle roll which doesn't do anything\n  if (result.rolltype == 61) {\n    return true;\n  }\n\n  // Some sort of piling-on roll that isn't the armor or the injury roll\n  if (result.rolltype == 63) {\n    return true;\n  }\n\n  // Block dice have dice repeated for the coaches selection, resulttype is missing for the second one\n  if (result.rolltype == 5 && result.resulttype != 2) {\n    return true;\n  }\n\n  // Just guessing at this\n  if (\n    result.rolltype == 8 &&\n    result.resulttype != 2 &&\n    result.subresulttype != 1\n  ) {\n    // Replay Coach-551-9619f4910217db1915282ea2242c819f_2016-04-07_00_05_06, Furry Bears turn 8 crowdsurf injury, shouldn't be ignored\n    if (result.subresulttype != 12) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction translateDice(dice, rollType) {\n  var diceList = translateStringNumberList(dice);\n\n  // For some reason block dice have an extra set of dice at the end\n  if (rollType == 5) {\n    diceList = diceList.slice(0, diceList.length / 2);\n  }\n  // Casualty dice are also doubled up, and also both rolls appear when an apoc is used (so the last one is the valid one)\n  else if (rollType == 8) {\n    diceList = diceList.slice(0, diceList.length / 2);\n    diceList = [diceList[diceList.length - 1]];\n  }\n\n  return diceList;\n}\n\nfunction extractKickoffDetails(replayStep) {\n  if (!replayStep.ruleseventkickofftable) return null;\n\n  return {\n    team: replayStep.boardstate.activeteam || 0,\n    turn:\n      replayStep.boardstate.listteams.teamstate[\n        replayStep.boardstate.activeteam || 0\n      ].gameturn || 0,\n    player: null,\n    rollType: -1,\n    dice: translateDice(replayStep.ruleseventkickofftable.listdice, -1),\n  };\n}\n"],"names":["$e5af0825b45788cf008f1731d77$var$_rolls","$de1762abb55249d07ce983$init","processReplay","data","gameDetails","jsonObject","firstStep","replay","replaystep","lastStep","length","stadiumName","gameinfos","namestadium","homeTeam","coachName","coachesinfos","coachinfos","userid","teamName","boardstate","listteams","teamstate","name","raceId","idrace","score","ruleseventgamefinished","matchresult","row","homescore","awayTeam","awayscore","extractGameDetails","console","log","replayStep","rolls","stepIndex","concat","Roll","fromReplayStep","playerDetails","version"],"version":3,"file":"replay.74676d46.js.map"}